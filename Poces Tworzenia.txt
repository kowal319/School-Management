StudentManagement Proces tworzenia
1. Dependencies - jpa, devtool, web, mysql, thymeleaf, 
2. Dodanie paczek w folderze java pt. controller, entity, repository, service
3. Utworzenie bazy danych w sql i polacznei sql. w Aplication properties trzeba dodac to 
	spring.datasource.url=jdbc:mysql://localhost:3306/Nazwa bazy danych
	spring.datasource.username=root
	spring.datasource.password=root
	spring.jpa.show-sql=true
	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
	logging.level.org.hibernate.SQL=DEBUG
4. Stworzenie klasy student w pakiecie entity z opowiednimi parametrami i konstruktorami geta itd
5. Storzenie tez tam default contructor czyli pusty public student(){}
6. Dodanie nam public class @Entitty z java persistance oraz nazwanie tabeli @Table(name = "students" )
7. ponizej public class piszemny @Id poniewaz to jest primary key oraz dodajemy     @GeneratedValue(strategy = GenerationType.IDENTITY)
8. Dodanie do kazdego nazwy parametru nazwy kolumny np:
	  @Column(name = "first_name", nullable = false)
    	private String firstName;
9. Tworzymy w pakiecie repository interfejs pt StudentRepository, rozszerzamy go o JpaRepository<Student, Long> , student poniewaz studenci beda a LONG poniewaz takiego typu jest primary key czyli id
10. W Pakiecie service tworzym nowy pakiet pt Impl, czyli implementation, w nim klase StudentServiceImpl tkora implemenntuje Stundet service - trzeba dodac
11. W pakeicie student service tworzymy interfejs StudentService
12. W pakiecie controller tworzym klase StudentController i dodajemy do niej adontotacje @Controller
13. W Student service dodajemy opcje List<Students> getAllStudents ();
14. W StudentServiceImpl dajemy funkcje mozna to zrobic jako generate - ovveride i funkcje zaznaczamy, jako return trzeba bedzie zmienic na studenRepositroy.findall ale to po dodaniu nastepnych funkcji
15. Nad nazwa klasy dodajemy adnotacje ze to servis
16. Dodajemy private  StudentRepository studentRepository; oraz jego konstruktor przez generate, trzeba tez dodac super(); linje nad this.
17. Patrz 14
18. dodajemy w student controller  @GetMapping("/students")
    public String listStudents(Model model){
      model.addAttribute("students", studentService.getAllStudents());
      return "students";
    }
19. Tworzymy html plik w folderze templates
20. Wchodzimy na strone bootstrap css cdn introduction tam kopiujemy link css, wklejamy go pod title w html file
21. jakby byl error z whitelabel to znaczy ze w zlym miejscu te foldery zrobione i trzeba przeniesc to wszystko do tego folderu najnizszego
22. HTML wyglada tak :
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Student Management System</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
          crossorigin="anonymous">

</head>
<body>
<div class = "container">
    <div class = "row">
        <h1> List Students </h1>
    </div>
    <table class = "table table-striped table-bordered">
        <thread class = "table-dark">
            <tr>
                <th> Student First Name</th>
                <th> Student Last Name</th>
                <th> Student Email</th>
                <th> Actions</th>
            </tr>
        </thread>

        <tbody>
        <tr th:each = "student: ${students}">
            <td th:text = "${student.firstName}"></td>
            <td th:text = "${student.lastName}"></td>
            <td th:text = "${student.email}"></td>
        </tr>
        <div>

        </div>
        </tbody>
    </table>
</div>
</body>
</html>
23. Pamietac zeby w klasie z konstruktorem Student usunac w konstruktorze ID i dac super(); bo inaczje bedzie blad w nastepnym
24. W kalsie studentmanagementapplication dodajemy nastepujace rzeczy public class StudentManagementApplication implements CommandLineRunner {

    public static void main(String[] args) {

        SpringApplication.run(StudentManagementApplication.class, args);
    }
    @Autowired
    private StudentRepository studentRepository;

    @Override
    public void run(String... args) throws Exception {

        Student student1 = new Student( "Bartek", "Kowal", "blabla@wp.pl");
        studentRepository.save(student1);

        Student student2 = new Student("Damian", "Nos", "ddsfds@wp.pl");
        studentRepository.save(student2);

    }
}
 trzeba zapamietac ze przy dodawaniu rozszerzenia public class StudentManagementApplication implements CommandLineRunner {
 trzeba wziac more action i wygenerowac tego runa zeby dodac klientow.
25. Odpalamy i sprawdzamy czy dziala
26 Dodajemy do html opcje dodawania studentow :
	  <div class = "row">
        <div class = "col-lg-3">
            <a th:href="@{/students/new}" class = "btn btn-primary btn-sm mb-3"> Add Student</a>
        </div>
27. W klasie student controller tworzym tez funkcje dodania studenta : 
	    @GetMapping("students/new")
    public String createStudentForm(Model model){
        Student student = new Student();
        model.addAttribute("student", student);
        return "create_student";
    }
28.  Tworzymy plik html create_students
29.  ten plik am tak wygladac :
 <!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="ISO-8859-1">
<title>Student Management System</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
	integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
	crossorigin="anonymous">
</head>
<body>
<nav class="navbar navbar-expand-md bg-dark navbar-dark">
  <!-- Brand -->
  <a class="navbar-brand" href="#">Student Management System</a>

  <!-- Toggler/collapsibe Button -->
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
    <span class="navbar-toggler-icon"></span>
  </button>

  <!-- Navbar links -->
  <div class="collapse navbar-collapse" id="collapsibleNavbar">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" th:href="@{/students}">Student Management</a>
      </li>
    </ul>
  </div>
</nav>
<br>
<br>
	<div class = "container">
		<div class = "row">
			<div class ="col-lg-6 col-md-6 col-sm-6 container justify-content-center card">
				<h1 class = "text-center"> Create New Student </h1>
				<div class = "card-body">
					<form th:action="@{/students}" th:object = "${student}" method="POST">
						<div class ="form-group">
							<label> Student First Name </label>
							<input
							type = "text"
							name = "firstName"
							th:field = "*{firstName}"
							class = "form-control"
							placeholder="Enter Student First Name" 
							/>
						</div>
						
						<div class ="form-group">
							<label> Student Last Name </label>
							<input
							type = "text"
							name = "lastName"
							th:field = "*{lastName}"
							class = "form-control"
							placeholder="Enter Student Last Name" 
							/>
						</div>
						
						<div class ="form-group">
							<label> Student Email </label>
							<input
							type = "text"
							name = "email"
							th:field = "*{email}"
							class = "form-control"
							placeholder="Enter Student Email" 
							/>
						</div>
						
						<div class = "box-footer">
							<button type="submit" class = "btn btn-primary">
								Submit
							</button>
						</div>
					</form>
				
				</div>
			</div>
		</div>
	</div>
</body>
</html>
30. Wchodzimy w studentController i tam twozym funkcje do zapisywania studentow :
    @PostMapping("/students")
    public String saveStudent(@ModelAttribute("student") Student student){
    }
31. wchodzimy w interfejs student service i tworzryym w nim funkcje :     Student saveStudent(Student student);
32. Nastepnie wchodzimy w student servie impl i implementujemy metode: 
    @Override
    public Student saveStudent(Student student) {
        return studentRepository.save(student)
    }
33. Wracamy do student controller i dodajemy do sve students
    studentService.saveStudent(student);
        return "redirect:/students";
34. I odpalamy :-) 
35. Jak dziala to idziemy do bootstrap nav bar z w3, kopiujemu ktory sie podoba, tym raze to byl ten collapse i wklejamy go w student nad body
36. Oczywiscie zmieniamy nazwe na student management system oraz jako 1 dodajemy                
 <a class="nav-link" th:href="@{/students}">Student Management</a>
37. Usuwamy dwa nastepne niepotrzbene opcje
38. W students html dodajemy    pod studentn email td
<a th:href="@{students/edit/{id}(id=${student.id})}"
               class = "btn btn-primary"> Update </a>
            </td>
39. Nastpenie idziemy do student controller i tam dodajemy metode:
	@GetMapping("/students/edit/{id}")
    public String editStudentForm(@PathVariable Long id, Model model){
        
    }
40. Idziemy do student service i tam dodajemy dwie metody:
	   Student getStudentById(Long id);
    Student updateStudent(Student student);
41. Whcodzimy w student service impl tam sie powinienn blad wswietlic i dodajemy te dwie metody
	 @Override
    public Student getStudentById(Long id) {
        return studentRepository.findById(id).get();
    }

    @Override
    public Student updateStudent(Student student) {
        return studentRepository.save(student);
    }
42. W student controller dodajemy :
model.addAttribute("student", studentService.getStudentById(id));
return "edit_student";
43. Dodajemy nowy plik html o nazwie edit_students  no i ma wygladac tak: 
	<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="ISO-8859-1">
<title>Student Management System</title>
<link rel="stylesheet"
	href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
	integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
	crossorigin="anonymous">
</head>
<body>
<nav class="navbar navbar-expand-md bg-dark navbar-dark">
  <!-- Brand -->
  <a class="navbar-brand" href="#">Student Management System</a>

  <!-- Toggler/collapsibe Button -->
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
    <span class="navbar-toggler-icon"></span>
  </button>

  <!-- Navbar links -->
  <div class="collapse navbar-collapse" id="collapsibleNavbar">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" th:href="@{/students}">Student Management</a>
      </li>
    </ul>
  </div>
</nav>
<br>
<br>
	<div class = "container">
		<div class = "row">
			<div class ="col-lg-6 col-md-6 col-sm-6 container justify-content-center card">
				<h1 class = "text-center"> Update Student </h1>
				<div class = "card-body">
					<form th:action="@{/students/{id} (id=${student.id})}" th:object = "${student}" method="POST">
						<div class ="form-group">
							<label> Student First Name </label>
							<input
							type = "text"
							name = "firstName"
							th:field = "*{firstName}"
							class = "form-control"
							placeholder="Enter Student First Name" 
							/>
						</div>
						
						<div class ="form-group">
							<label> Student Last Name </label>
							<input
							type = "text"
							name = "lastName"
							th:field = "*{lastName}"
							class = "form-control"
							placeholder="Enter Student Last Name" 
							/>
						</div>
						
						<div class ="form-group">
							<label> Student Email </label>
							<input
							type = "text"
							name = "email"
							th:field = "*{email}"
							class = "form-control"
							placeholder="Enter Student Email" 
							/>
						</div>
						
						<div class = "box-footer">
							<button type="submit" class = "btn btn-primary">
								Submit
							</button>
						</div>
					</form>
				
				</div>
			</div>
		</div>
	</div>
</body>
</html>
44. W student controller dodajemy oczywicie nowa funkcje ktora wyglada nastepujaco
	 @PostMapping("/students/{id}")
    public String updateStudent(@PathVariable Long id,
                                @ModelAttribute("student") Student student,
                                Model model) {
        Student existingStudent = studentService.getStudentById(id);
        existingStudent.setId(id);
        existingStudent.setFirstName(student.getFirstName());
        existingStudent.setLastName(student.getLastName());
        existingStudent.setEmail(student.getEmail());
        
        studentService.updateStudent(existingStudent);
        return "redirect:/students";
    }
45. No i sprawdzamy :-) 
46. Jak dziala to wchodzimy w student html i dodajemy funkcje usuwania zaraz pod ta poprzednia:
 	<a th:href="@{students/{id}(id=${student.id})}"
               class = "btn btn-danger"> Delete </a>
47. Wchodzim w student controller i dodajemy tam ta funkcje : 
    @GetMapping("/students/{id}")
    public String deleteStudent(@PathVariable Long id){
        
    }
48. teraz idziemy do interfejsu i tam dodajemy ta metode tez : 
	    void deleteStudentById(Long id);
49. Wchodzim w implementation i implementujemy
	 @Override
    public void deleteStudentById(Long id) {
        studentRepository.deleteById(id);
    }
50. teraz wchodzimy w student controller i dodajemy funkcje 
    @GetMapping("/students/{id}")
    public String deleteStudent(@PathVariable Long id){
studentService.deleteStudentById(id);
return "redirect:/students";
    }
51. I to an tyle a teraz sam
52. Dodanie dodatjowych info o stuedncie w student entity, adress itd
53. dodanie funkcji w student controller
 @GetMapping("/students/info/{id}")
    public String listStudent(@PathVariable Long id,  Model model){
        model.addAttribute("students", studentService.getStudentById(id));
        return "student_info";
    }
54. Napisanie html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Student Management System</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
        crossorigin="anonymous">

</head>
<body>

<nav class="navbar navbar-expand-md bg-dark navbar-dark">
  <a class="navbar-brand" href="#">Student Management System</a>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsibleNavbar">
    <span class="navbar-toggler-icon"></span>
  </button>
  <div class="collapse navbar-collapse" id="collapsibleNavbar">
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" th:href="@{/students}">Student Management</a>
      </li>
    </ul>
  </div>
</nav>
<div class = "container">
  <div class = "row">
    <h1>Student </h1>
  </div>
  <table class = "table table-striped table-bordered">
    <thread class = "table-dark">
      <tr>
        <th> Student Contact Number</th>
        <th> Student Address</th>
        <th> Student email</th>
        <th> Student Parent Name</th>
        <th> Student Parent Contact Number</th>
        <th> Actions</th>
      </tr>
    </thread>

    <tbody>
    <tr th:each = "student: ${students}">
      <td th:text = "${student.contactNumber}"></td>
      <td th:text = "${student.address}"></td>
      <td th:text = "${student.email}"></td>
      <td th:text = "${student.parentName}"></td>
      <td th:text = "${student.parentContactNumber}"></td>
    </tr>
    </tbody>
  </table>
</div>
</body>
</html>


